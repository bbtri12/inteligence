intelligence/
‚îÇ
‚îú‚îÄ‚îÄ ContentView.swift          ‚Üê (File 1 b·∫°n ƒë√£ c√≥)
‚îú‚îÄ‚îÄ SummaryService.swift       ‚Üê (File 2 b·∫°n s·∫Øp th√™m)
‚îú‚îÄ‚îÄ ImageGenerator.swift       ‚Üê (File 3 k·∫ø ti·∫øp)
‚îú‚îÄ‚îÄ CreateSummaryIntent.swift
‚îú‚îÄ‚îÄ ActivityView.swift
‚îú‚îÄ‚îÄ Info.plist
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ .gitignore
SummaryService.swift
swift
import Foundation
import SwiftUI

// üß† D·ªãch v·ª• t√≥m t·∫Øt vƒÉn b·∫£n (AI)
class SummaryService {
    
    // API endpoint (c√≥ th·ªÉ thay b·∫±ng model c·ªßa OpenAI ho·∫∑c HuggingFace n·∫øu b·∫°n mu·ªën m·ªü r·ªông sau)
    private let endpoint = "https://api.openai.com/v1/chat/completions"
    private let apiKey = "YOUR_API_KEY" // üîë Thay b·∫±ng kh√≥a th·∫≠t n·∫øu c√≥

    // H√†m g·ªçi AI ƒë·ªÉ t√≥m t·∫Øt n·ªôi dung
    func summarizeText(_ text: String, completion: @escaping (String) -> Void) {
        guard let url = URL(string: endpoint) else {
            completion("‚ùå URL kh√¥ng h·ª£p l·ªá.")
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.addValue("application/json", forHTTPHeaderField: "Content-Type")
        request.addValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")

        // N·ªôi dung g·ª≠i l√™n AI
        let body: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": [
                ["role": "system", "content": "You are an assistant that summarizes text in both English and Vietnamese."],
                ["role": "user", "content": "Summarize this text in both English and Vietnamese: \(text)"]
            ]
        ]

        do {
            request.httpBody = try JSONSerialization.data(withJSONObject: body)
        } catch {
            completion("‚ùå Kh√¥ng th·ªÉ m√£ h√≥a d·ªØ li·ªáu g·ª≠i l√™n API.")
            return
        }

        // G·ª≠i y√™u c·∫ßu ƒë·∫øn API
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion("‚ùå L·ªói m·∫°ng: \(error.localizedDescription)")
                return
            }

            guard let data = data else {
                completion("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ph·∫£n h·ªìi.")
                return
            }

            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any],
                   let choices = json["choices"] as? [[String: Any]],
                   let message = choices.first?["message"] as? [String: Any],
                   let summary = message["content"] as? String {
                    completion(summary)
                } else {
                    completion("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.")
                }
            } catch {
                completion("‚ùå L·ªói ph√¢n t√≠ch JSON.")
            }
        }.resume()
    }
}
